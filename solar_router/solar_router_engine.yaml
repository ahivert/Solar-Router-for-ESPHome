# ----------------------------------------------------------------------------------------------------
# User interaction
# ----------------------------------------------------------------------------------------------------

# Activate of not power meter
globals:
  - id: power_meter_activated
    type: int
    initial_value: "0"

switch:
  # Define is router is active or not
  # When switch is ON, pooling timer will trigger every seconds
  - platform: template
    name: "Activate Solar Routing"
    optimistic: true
    restore_mode: ALWAYS_OFF
    id: activate
    on_turn_on:
      then:
        - light.turn_on: green_led
        - lambda: id(power_meter_activated) = 1;
    on_turn_off:
      then:
        - light.turn_off: green_led
        - number.to_min: regulator_opening
        - lambda: id(real_power).publish_state(NAN);
        - lambda: id(power_meter_activated) = 0;

number:
  # Report or define regulator opening value
  # If solar routing is not enabled, this value define the level of regulator opening
  # If solar routing is enabled, this value is automatically updated and reflect the level
  #   of regulator opening defined by the solar router
  #   Moving the slider will have an impact on the solar energy diverted and will
  #   immadiatelly be corrected by the solar router. It is advised to not use the slider
  #   when the router is activated.
  - platform: template
    name: "Regulator Opening"
    id: regulator_opening
    min_value: 0
    max_value: 100
    step: 1
    unit_of_measurement: "%"
    optimistic: True
    mode: slider
    on_value:
      then:
        - script.execute: regulation_control
        - script.execute: energy_saved_counter
        - if:
            condition:
              number.in_range:
                id: regulator_opening
                above: 1
            then:
              - light.turn_on:
                  id: green_led
                  effect: blink
            else:
              - light.turn_off: green_led
              - if:
                  condition:
                    - switch.is_on: activate
                  then:
                    - light.turn_on: green_led

  # Define the reactivity of regulator opening
  - platform: template
    name: "Reactivity"
    id: reactivity
    optimistic: True
    restore_value: True
    mode: box
    min_value: 1
    max_value: 100
    initial_value: 10
    unit_of_measurement: ""
    step: 1

  # Define the target level of grid exchange
  #   0 : no exchange
  #  <0 : continue the send energy to the grid
  #  >0 : pull energy from the grid to better confort
  - platform: template
    name: "Target grid exchange"
    id: target_grid_exchange
    optimistic: True
    restore_value: True
    mode: box
    min_value: -99999
    max_value: 99999
    initial_value: 0
    unit_of_measurement: "W"
    step: 1

# ----------------------------------------------------------------------------------------------------
# Define scripts for power collection or energy regulation
# ----------------------------------------------------------------------------------------------------

script:
  # Manage energy regulation
  # Calculate the delta of percentage to apply to the regulator opening status to go closer to the
  # objective. Closer we are to the objective smaller are the steps. Reactivity parameter is
  # doing a ponderation on this parameter to avoid resonance effects.
  - id: energy_regulation
    mode: single
    then:
      # Define the opening level of regulator based on power measured and grid exchange target
      # The value of regulator is a precentage and is then limited to the range 0 100
      - lambda: |-
          double delta = -1*(id(real_power).state-id(target_grid_exchange).state)*id(reactivity).state/1000;
          double regulator_status = id(regulator_opening).state + delta;            
          regulator_status = std::max(0.0, std::min(100.0, regulator_status));
          id(regulator_opening).publish_state(regulator_status);

# ----------------------------------------------------------------------------------------------------
# Pooling data every seconds
# ----------------------------------------------------------------------------------------------------

# Component managing time.
# If activate switch is ON, power measurment and energy regulation are performed every secondes
time:
  - platform: sntp
    on_time:
      # Trigger action every second
      - seconds: /1
        then:
          - if:
              condition:
                switch.is_on: activate
              then:
                - script.execute: energy_regulation
                - light.turn_off: yellow_led
                - if:
                    condition:
                      lambda: return id(real_power).state == 0.0;
                    then:
                      # When 0.0 is returns, it means that an error occurs
                      - light.turn_on:
                          id: yellow_led
                          effect: fast
                    else:
                      - light.turn_on: yellow_led

      # Manage WiFi feedback with yellow LED
      - seconds: /5
        then:
          - light.turn_off: yellow_led
          - if:
              condition:
                wifi.connected:
              then:
                - light.turn_on: yellow_led
              else:
                - light.turn_on:
                    id: yellow_led
                    effect: blink
                - switch.turn_off: activate

# ----------------------------------------------------------------------------------------------------
# LED Management
# ----------------------------------------------------------------------------------------------------

output:
  - id: yellow_led_output
    platform: gpio
    pin: ${yellow_led_pin}

  - id: green_led_output
    platform: gpio
    pin: ${green_led_pin}

light:
  - id: yellow_led
    platform: binary
    output: yellow_led_output
    internal: True
    effects:
      - strobe:
          name: blink
          colors:
            - state: True
              brightness: 100%
              duration: 250ms
            - state: False
              brightness: 100%
              duration: 250ms
      - strobe:
          name: fast
          colors:
            - state: True
              brightness: 100%
              duration: 50ms
            - state: False
              brightness: 100%
              duration: 50ms

  - id: green_led
    platform: binary
    output: green_led_output
    internal: True
    effects:
      - strobe:
          name: blink
          colors:
            - state: True
              brightness: 100%
              duration: 250ms
            - state: False
              brightness: 100%
              duration: 250ms
